#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HedgeFarm Pricer API.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
2. HTTP API —á–µ—Ä–µ–∑ requests
"""

import os
import sys
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append('.')

def example_direct_usage():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π."""
    print("=== –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π ===")
    
    try:
        from hedgefarm.datasources import MOEXClient
        from hedgefarm.pricing.aggregator import calculate_all_prices
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç MOEX
        moex_client = MOEXClient()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = moex_client.get_market_data("WHEAT")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        result = calculate_all_prices(market_data, volume=1000, term_months=6)
        
        print(f"–§—å—é—á–µ—Ä—Å: {result.floor_futures_rubkg:.2f} —Ä—É–±/–∫–≥")
        print(f"PUT –æ–ø—Ü–∏–æ–Ω: {result.floor_put_rubkg:.2f} —Ä—É–±/–∫–≥")
        print(f"–§–æ—Ä–≤–∞—Ä–¥: {result.floor_forward_rubkg:.2f} —Ä—É–±/–∫–≥")
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.recommended}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {e}")


def example_api_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ HTTP API."""
    print("\n=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTP API ===")
    
    base_url = "http://127.0.0.1:8000"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            print("‚úì –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ö† –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º")
            return
    except requests.exceptions.RequestException:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn hedgefarm.service:app")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
    try:
        params = {
            "culture": "wheat",
            "volume": 1000,
            "term_months": 6
        }
        
        response = requests.get(f"{base_url}/price", params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def example_post_request():
    """–ü—Ä–∏–º–µ—Ä POST –∑–∞–ø—Ä–æ—Å–∞."""
    print("\n=== POST –∑–∞–ø—Ä–æ—Å ===")
    
    base_url = "http://127.0.0.1:8000"
    
    request_data = {
        "culture": "wheat",
        "volume": 5000,
        "term_months": 12
    }
    
    try:
        response = requests.post(
            f"{base_url}/price", 
            json=request_data, 
            timeout=10,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {data['volume_t']} —Ç–æ–Ω–Ω –Ω–∞ {data['term_m']} –º–µ—Å—è—Ü–µ–≤:")
            print(f"  –§—å—é—á–µ—Ä—Å: {data['floor_futures_rubkg']:.2f} —Ä—É–±/–∫–≥")
            print(f"  –û–ø—Ü–∏–æ–Ω:  {data['floor_put_rubkg']:.2f} —Ä—É–±/–∫–≥")
            print(f"  –§–æ—Ä–≤–∞—Ä–¥: {data['floor_forward_rubkg']:.2f} —Ä—É–±/–∫–≥")
            print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommended']}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def example_detailed_analysis():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    print("\n=== –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ===")
    
    base_url = "http://127.0.0.1:8000"
    
    try:
        params = {
            "culture": "wheat",
            "volume": 2000,
            "term_months": 9
        }
        
        response = requests.get(f"{base_url}/price/detailed", params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            print("üìà –§—å—é—á–µ—Ä—Å—ã:")
            futures = data.get("futures", {})
            print(f"  MGP: {futures.get('mgp_rub_kg', 0):.2f} —Ä—É–±/–∫–≥")
            print(f"  –ú–∞—Ä–∂–∞: {futures.get('margin_required', 0):,.0f} —Ä—É–±")
            print(f"  –ü–ª–µ—á–æ: {futures.get('leverage', 0):.1f}x")
            
            print("\nüìä PUT –æ–ø—Ü–∏–æ–Ω—ã:")
            puts = data.get("put_option", {})
            print(f"  MGP: {puts.get('mgp_rub_kg', 0):.2f} —Ä—É–±/–∫–≥")
            print(f"  –°—Ç—Ä–∞–π–∫: {puts.get('strike', 0):,.0f} —Ä—É–±/—Ç")
            print(f"  –ü—Ä–µ–º–∏—è: {puts.get('premium', 0):.0f} —Ä—É–±/—Ç")
            print(f"  –î–µ–ª—å—Ç–∞: {puts.get('delta', 0):.3f}")
            
            print("\nüîÑ –§–æ—Ä–≤–∞—Ä–¥:")
            forward = data.get("forward", {})
            print(f"  MGP: {forward.get('mgp_rub_kg', 0):.2f} —Ä—É–±/–∫–≥")
            print(f"  –î–∏—Å–∫–æ–Ω—Ç: {forward.get('discount_applied', 0)*100:.1f}%")
            print(f"  –ë–µ–∑ –º–∞—Ä–∂–∏: {forward.get('no_margin_required', False)}")
            
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


if __name__ == "__main__":
    print("üåæ HedgeFarm Pricer - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π
    example_direct_usage()
    
    # API –ø—Ä–∏–º–µ—Ä—ã (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω)
    example_api_usage()
    example_post_request()
    example_detailed_analysis()
    
    print("\n" + "=" * 50)
    print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:")
    print("   uvicorn hedgefarm.service:app --reload")
    print("   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://127.0.0.1:8000/docs")